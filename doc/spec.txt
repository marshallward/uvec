Think of this as a generic ``ndarray`` in C for use in multiple languages.

ndarray structure
=================

ndarraytypes.h

``PyArrayObject``

   This is a minimal types that obscures the actual content.

   .. code:: c

      typedef struct tagPyArrayObject {
          PyObject_HEAD
      } PyArrayObject;

   To access the contents, recast to a ``PyArrayObject_fields`` type.

   .. code:: c

      typedef struct tagPyArrayObject_fields {
         PyObject_HEAD

         char *data;             // Pointer to raw data
         int nd;                 // Number of dimensions
         npy_intp *dimensions;   // vector of dim sizes (aka "shape")
         npy_intp *strides;      // Vector of displacements on each dim
         PyObject *base;         // TODO!
         PyArray_Descr *descr;   // Type structure
         int flags;              // TODO!
         PyObject *weakreflist;  // TODO!

      } PyArrayObject_fields;

   Recast a ``PyArrayObject`` to access these fields.

   .. code:: c

      PyArrayObject arr;
      int nd = (PyArrayObject_fields *) arr -> nd;

   Flags are as follows:

   .. code:: c

      #define NPY_ARRAY_C_CONTIGUOUS    0x0001     // "Row major"
      #define NPY_ARRAY_F_CONTIGUOUS    0x0002     // "Column major"
      #define NPY_ARRAY_OWNDATA         0x0004     // Not view or shallow copy

      #define NPY_ARRAY_FORCECAST       0x0010
      #define NPY_ARRAY_ENSURECOPY      0x0020
      #define NPY_ARRAY_ENSUREARRAY     0x0040
      #define NPY_ARRAY_ELEMENTSTRIDES  0x0080

      #define NPY_ARRAY_ALIGNED         0x0100     // Aligned to type
      #define NPY_ARRAY_NOTSWAPPED      0x0200     // Native endianness
      #define NPY_ARRAY_WRITEABLE       0x0400
      //
      #define NPY_ARRAY_UPDATEIFCOPY    0x1000

      // An internal flag set in multiarray/arrayobject.h
      #define NPY_ARRAY_WARN_ON_WRITE   0x8000

``PyArray_Descr``

   More data contained in ``descr``:

   .. code:: c

      typedef struct _PyArray_Descr {
          PyObject_HEAD

          PyTypeObject typeobj;  // TODO!
          char kind;             // ???
          char type;             // NPY_TYPECHAR
          char byteorder;        // Endianness (>, <, |, =)
          char flags;            // 8-bit-packed flags?

          int type_num;          // "Number representing this type"?
          int elsize;            // Element size
          int alignment;         // "Alignment" (memory?)

          struct _arr_descr *subarray;    // No idea
          PyObject *fields;               // Fields dict for type?
          PyObject *names;                // Ordered tuple of field names?

          PyArray_ArrFuncs;
          PyObject *metadata;
          NpyAuxData *c_metadata;
          npy_hash_t hash;

      } PyArray_Descr;

   Test


NumPy data types and sizes
==========================

The data types are indexed under an ``enum`` in ``ndarraytypes.h``

.. code:: c

   enum NPY_TYPES {    NPY_BOOL=0,
                       NPY_BYTE, NPY_UBYTE,
                       NPY_SHORT, NPY_USHORT,
                       NPY_INT, NPY_UINT,
                       NPY_LONG, NPY_ULONG,
                       NPY_LONGLONG, NPY_ULONGLONG,
                       NPY_FLOAT, NPY_DOUBLE, NPY_LONGDOUBLE,
                       NPY_CFLOAT, NPY_CDOUBLE, NPY_CLONGDOUBLE,
                       NPY_OBJECT=17,
                       NPY_STRING, NPY_UNICODE,
                       NPY_VOID,
                       /*
                        * New 1.6 types appended, may be integrated
                        * into the above in 2.0.
                        */
                       NPY_DATETIME, NPY_TIMEDELTA, NPY_HALF,

                       NPY_NTYPES,
                       NPY_NOTYPE,
                       NPY_CHAR,      /* special flag */
                       NPY_USERDEF=256,  /* leave room for characters */

                       /* The number of types not including the new 1.6 types */
                       NPY_NTYPES_ABI_COMPATIBLE=21
   };

These are stored in ``(PyArrayObject_fields *)arr->descr->type_num``.


Data type sizes
---------------

The sizes are defined in ``numpyconfig.h``, which reads them from
``_numpyconfig.h``.  However, this file is not part of the repository and is
generated at compilation by ``setup.py``.  The contents of ``numpyconfig.h``
are as follows:

.. code:: c

   #define NPY_SIZEOF_SHORT        @SIZEOF_SHORT@
   #define NPY_SIZEOF_INT          @SIZEOF_INT@
   #define NPY_SIZEOF_LONG         @SIZEOF_LONG@
   #define NPY_SIZEOF_FLOAT        @SIZEOF_FLOAT@
   #define NPY_SIZEOF_DOUBLE       @SIZEOF_DOUBLE@
   #define NPY_SIZEOF_LONGDOUBLE  	@SIZEOF_LONG_DOUBLE@
   #define NPY_SIZEOF_PY_INTPTR_T  @SIZEOF_PY_INTPTR_T@
   #define NPY_SIZEOF_OFF_T        @SIZEOF_OFF_T@

   #define NPY_SIZEOF_COMPLEX_FLOAT        @SIZEOF_COMPLEX_FLOAT@
   #define NPY_SIZEOF_COMPLEX_DOUBLE       @SIZEOF_COMPLEX_DOUBLE@
   #define NPY_SIZEOF_COMPLEX_LONGDOUBLE  	@SIZEOF_COMPLEX_LONG_DOUBLE@

The actual values of ``SIZEOF_*`` are determined by ``numpy/core/setup.py`` and
its helper functions.

Each variable is passed through the ``check_types`` function, which calls
``check_type_size`` from ``numpy/distutils/command/config.py``.  This function
is a bit wacky and autogenerates many C test programs and attempts to match the
value of, say, ``SIZEOF_INT`` to the value of ``sizeof(int)`` using a binary
search.

Complex types are stored in a (C99 complex) struct, and the struct is
size-checked in the same way as the primitive types.

In some cases, it seems to just read ``Python.h``.

It's all very convoluted, but you end up with a ``_numpyconfig.h`` file whose
values match the value of ``sizeof`` on your system.


ndarray attributes
==================

getset.c:

- ndim
- flags
- shape
- strides
- data
- itemsize
- size
- nbytes
- base
- dtype
- real
- imag
- flat
- ctypes
- T
- __array_interface__
- __array_struct__
- __array_priority__
- __array_finalize__


methods.c:

- Subtypes
  - __array__
  - __array_prepare__
  - __array_wrap__

- Sys
  - __sizeof__

- Copy
  - __copy__
  - __deepcopy__

- Pickling
  - __reduce__
  - __setstate__
  - dumps
  - dump

- original and extended methods (2005)
  - all
  - any
  - argmax
  - argmin
  - argpartition
  - argsort
  - astype
  - byteswap
  - choose
  - clip
  - compress
  - conj
  - conjugate
  - copy
  - cumprod
  - cumsum
  - diagonal
  - dot
  - fill
  - flatten
  - getfield
  - item
  - itemset
  - max
  - mean
  - min
  - newbyteorder
  - nonzero
  - partition
  - prod
  - ptp
  - put
  - ravel
  - repeat
  - reshape
  - resize
  - round
  - searchsorted
  - setfield
  - setflags
  - sort
  - squeeze
  - std
  - sum
  - swapaxes
  - take
  - tobytes
  - tofile
  - tolist
  - tostring
  - trace
  - transpose
  - var
  - view
